#!/usr/bin/python
#GPLv2

import sys
import os
from OpenGL.GL import *
from PyQt5 import QtGui, uic, QtCore, QtWidgets
from PyQt5.QtOpenGL import *

import util

class ViewerWidget(QGLWidget):
    def __init__(self, parent = None):
        super(ViewerWidget, self).__init__(parent)
        self.gcode_points = []
#        uic.loadUi('ogl_viewer.ui') 
        self.rot = 0

    def paintGL(self):
        #glRectf(-5, -5, 5, 5)
        L = 0
        #glDisable(GL_DEPTH_TEST)
        self.renderText(self.gcode_points[0]['X'],
                        self.gcode_points[0]['Y'],
                        "S")
        #glEnable(GL_DEPTH_TEST)
        #self.rot += 0.1
        #glRotatef(self.rot, 1,0,0)
        glBegin(GL_LINES)
        for i in range(len(self.gcode_points) - 1):
          start = self.gcode_points[i]
          end = self.gcode_points[i+1]
          try:
            if start['cmd'] == 'G5':
              L = start['L']
              start = self.gcode_points[i+1]
              end = self.gcode_points[i+2]
            if end['cmd'] == 'G5':
              L = end['L']
              end = self.gcode_points[i+2]
          except IndexError:
            continue
          glColor3f(i/float(len(self.gcode_points)), 0.5, float(L))
          #start['Z'] = 0
          #end['Z'] = 0
          #print(map(float, [start['X'], start['Y'], start['Z']]))
          glVertex3f(*map(float, [start['X'], start['Y'], start['Z']]))
          glVertex3f(*map(float, [end['X'], end['Y'], end['Z']]))
        glEnd()

    def resizeGL(self, w, h):
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-50, 50, -50, 50, -500.0, 500.0)
        glViewport(0, 0, w, h)

    def initializeGL(self):
        glClearColor(0.0, 0.0, 0.0, 1.0)
        glClear(GL_COLOR_BUFFER_BIT)

    def loadGCode(self, filename):
      self.gcode_points = util.load_gcode_commands(filename)


class MainW(QtWidgets.QMainWindow):
  def __init__(self):
    QtWidgets.QMainWindow.__init__(self)
    widget = ViewerWidget(self)
    self.setCentralWidget(widget)

    widget.loadGCode(sys.argv[1])


def main():

#  for i in range(len(gcode_points) - 1):
#    start = gcode_points[i]
#    end = gcode_points[i+1]

  app = QtWidgets.QApplication(['Viewer'])
  m = MainW()
  m.show()

  sys.exit(app.exec_())
  pass

if __name__ == '__main__':
  main()
